// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  notifications Notification[]

  @@map("users")
}

model Question {
  id           String  @id @default(uuid())
  title        String
  slug         String  @unique
  content      String
  authorId     String  @map("author_id")
  bestAnswerId String? @unique @map("best_answer_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  author     User    @relation(fields: [authorId], references: [id])
  bestAnswer Answer? @relation("bestAnswer", fields: [bestAnswerId], references: [id])

  answers     Answer[]
  comments    Comment[]
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id         String @id @default(uuid())
  content    String
  authorId   String @map("author_id")
  questionId String @map("question_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  author       User         @relation(fields: [authorId], references: [id])
  question     Question     @relation(fields: [questionId], references: [id])
  bestAnswerOn Question?    @relation("bestAnswer")
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  author   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")
  title      String
  url        String

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}
